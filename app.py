import streamlit as st
from ibm_watsonx_ai import Credentials
from ibm_watsonx_ai.foundation_models import Model
from ibm_watsonx_ai.metanames import GenTextParamsMetaNames as GenParams
from gtts import gTTS
from fpdf import FPDF
import qrcode
from PIL import Image
import re
import smtplib
from email.message import EmailMessage
import os

# Page config
st.set_page_config(page_title="üßê AI Medical Chatbot", layout="centered")
st.title("üßê AI Medical Chatbot")
st.write("Type your symptom or disease to get medical department, causes, symptoms & precautions.")

# IBM watsonx.ai credentials from secrets
api_key = st.secrets["api_key"]
region = st.secrets["region"]
project_id = st.secrets["project_id"]

# IBM WatsonX model setup
creds = Credentials(api_key=api_key, url=f"https://{region}.ml.cloud.ibm.com")
model = Model(model_id="ibm/granite-3-3-8b-instruct", credentials=creds, project_id=project_id)

# Generation parameters
parameters = {
    GenParams.DECODING_METHOD: "greedy",
    GenParams.MAX_NEW_TOKENS: 300
}

# Function to get AI response
def get_medical_response(symptom):
    prompt = f'''A patient says: "{symptom}"

Based on this, provide:
1. Medical department to consult.
2. Possible related causes.
3. Common symptoms.
4. Safe precautions or home remedies.
5. Add a note advising the user to consult a doctor.

Format the response clearly as bullet points.
'''
    return model.generate_text(prompt=prompt, params=parameters)

# Clean text for PDF
def clean_text_for_pdf(text):
    return re.sub(r'[^\x00-\x7F]+', '', text)

# Email sending function
def send_email(receiver_email, file_path):
    sender_email = "your_email@gmail.com"  # Replace with your email
    app_password = "your_app_password"     # Replace with your app password

    msg = EmailMessage()
    msg['Subject'] = "üßê Your AI Medical Report"
    msg['From'] = sender_email
    msg['To'] = receiver_email
    msg.set_content("Please find attached your medical report generated by AI Medical Chatbot.")

    with open(file_path, "rb") as f:
        file_data = f.read()
        file_name = os.path.basename(file_path)
        msg.add_attachment(file_data, maintype="application", subtype="pdf", filename=file_name)

    with smtplib.SMTP_SSL("smtp.gmail.com", 465) as smtp:
        smtp.login(sender_email, app_password)
        smtp.send_message(msg)

# --- MAIN APP ---

query = st.text_input("üîç Enter Symptom or Disease:")

if query:
    with st.spinner("Analyzing..."):
        result = get_medical_response(query)
        st.markdown("### üìü Medical Guidance")
        st.markdown(result)

        # Audio response
        tts = gTTS(result, lang="en")
        tts.save("response.mp3")
        st.audio("response.mp3")

        # PDF Generation
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=12)
        cleaned = clean_text_for_pdf(result)
        pdf.multi_cell(0, 10, f"AI Medical Chatbot Report\n\nSymptom/Disease: {query}\n\nMedical Guidance:\n{cleaned}")
        pdf.output("medical_report.pdf")

        # Download Button
        with open("medical_report.pdf", "rb") as f:
            st.download_button("üìÖ Download PDF Report", f, "medical_report.pdf", mime="application/pdf")

        # Email option
        st.markdown("---")
        user_email = st.text_input("üìß Enter your email to receive the report:")
        if st.button("‚úâÔ∏è Send Report to Email"):
            if user_email:
                try:
                    send_email(user_email, "medical_report.pdf")
                    st.success("‚úÖ Report sent successfully to your email!")
                except Exception as e:
                    st.error(f"‚ùå Failed to send email: {e}")
